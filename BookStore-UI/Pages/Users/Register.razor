@page "/register"

@using BookStore_UI.Models
@using BookStore_UI.Contracts

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navMan

<h3 class="card-title">Register Now</h3>
@if (isField == true)
{
<div class="alert" alert-danger>
    <ErrorMessage Message="Something went wrong wih the operation"></ErrorMessage>
</div>
}

    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
            <ValidationMessage For="@(() => Model.EmailAddress)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="confirmpassword">Confirm Password</label>
            <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
            <ValidationMessage For="@(() => Model.ConfirmPassword)"></ValidationMessage>
        </div>
        <button type="submit" class="btn btn-primary btn-block">Register</button>

    </EditForm>

@code {
    private RegistrationModel Model = new RegistrationModel();
   
    bool isField = false;
    private async Task HandleRegistration()
    {
      var  response = await _authRepo.Register(Model);

        if (response)
        {
            _navMan.NavigateTo("/");
        }
        else
        {
            _navMan.NavigateTo("/");
            isField = true;


        }
    }
}
