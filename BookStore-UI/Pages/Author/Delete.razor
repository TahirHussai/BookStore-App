@page "/authors/delete/{Id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository _repo;
@inject NavigationManager _Navigate;
<h2 class="card-title">Are you sure want to delete this author ?</h2>
<hr />
@if (authModel != null)
{
    <div class="col-md-6">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <thead>
                <tr>
                    <td>First Name</td>
                    <td>@authModel.Firstname</td>
                </tr>
                <tr>
                    <td>Last Name</td>
                    <td>@authModel.Lastname</td>
                </tr>
                <tr>
                    <td>Bio</td>
                    <td>@authModel.Bio</td>
                </tr>
            </thead>
        </table>
    </div>
    @if (authModel.Books != null && authModel.Books.Count() > 0)
    {
        <div class="card" style="width: 18rem;">
            <div class="card-header">
                Author Book Details
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var item in authModel.Books)
                {
                    <li class="list-group-item">@item.Title-@item.Price</li>
                }

            </ul>
        </div>
    }
    else
    {
        <LoadingMessage Message="Loading Author Book Details...." />
    }


}
else
{
    <LoadingMessage Message="Loading Authors........" />
}
<button @onclick="BackToList" class="oi oi-media-skip-backward">
    <span >Back to list</span>
</button>
<button @onclick="DeleteAutor">
    <span class="oi oi-trash">Delete</span>
</button>
@code {
    @code {
        [Parameter]
        public string Id { get; set; }
        private bool isSuccess = false;
        private Author authModel = new Author();
        protected override async Task OnInitializedAsync()
        {
            int id = Convert.ToInt32(Id);
            authModel = await _repo.Get(Endpoints.AuthorsEndPoint, id);
        }
        private void BackToList()
        {
            _Navigate.NavigateTo("/authors/");
        }
        private async Task DeleteAutor()
        {
            isSuccess = await _repo.Delete(Endpoints.AuthorsEndPoint, authModel.Id);
            if (isSuccess == true)
            {
                BackToList();
            }
            else
            {
                isSuccess = false;
            }
        }

    }
}
