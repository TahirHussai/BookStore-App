@page "/authors/view/{Id}"
@inject IAuthorRepository _repo;
@inject NavigationManager _Navigate;

@if (authModel != null)
{
<div class="col-md-6">
    <h4 class="card-title">Author Details</h4>
    <hr />
    <table class="table table-responsive">
        <thead>
            <tr>
                <td>First Name</td>
                <td>@authModel.Firstname</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@authModel.Lastname</td>
            </tr>
            <tr>
                <td>Bio</td>
                <td>@authModel.Bio</td>
            </tr>
        </thead>
    </table>
</div>
@if (authModel.Books != null && authModel.Books.Count() > 0)
{
    <div class="card" style="width: 18rem;">
        <div class="card-header">
            Author Book Details
        </div>
        <ul class="list-group list-group-flush">
            @foreach (var item in authModel.Books)
            {
                <li class="list-group-item">@item.Title-@item.Price</li>
            }

        </ul>
    </div>
}
else
{
    <LoadingMessage Message="Loading Author Book Details...." />
}


}
else
{
<LoadingMessage Message="Loading Authors........" />
}
<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</button>
@code {
[Parameter]
public string Id { get; set; }

private Author authModel = new Author();
protected override async Task OnInitializedAsync()
{
    int id = Convert.ToInt32(Id);
    authModel = await _repo.Get(Endpoints.AuthorsEndPoint, id);
}
private void BackToList()
{
    _Navigate.NavigateTo("/authors/");
}
}
